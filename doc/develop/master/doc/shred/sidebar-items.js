initSidebarItems({"enum":[["AccessorCow","Either an `Accessor` of the system `T` or a reference to it."],["RunningTime",""]],"macro":[["par","The `par!` macro may be used to easily create a structure which runs things in parallel."],["seq","The `seq!` macro may be used to easily create a structure which runs things sequentially."]],"mod":[["cell","Helper module for some internals, most users don't need to interact with it."]],"struct":[["AsyncDispatcher","Like, `Dispatcher` but works asynchronously."],["DefaultProvider","A `SetupHandler` that simply uses the default implementation."],["Dispatcher","The dispatcher struct, allowing systems to be executed in parallel."],["DispatcherBuilder","Builder for the [`Dispatcher`]."],["Entry","An entry to a resource of the `Resources` struct. This is similar to the Entry API found in the standard library."],["Fetch","Allows to fetch a resource in a system immutably."],["FetchMut","Allows to fetch a resource in a system mutably."],["MetaIter","An iterator for the `MetaTable`."],["MetaIterMut","A mutable iterator for the `MetaTable`."],["MetaTable","The `MetaTable` which allows to store object-safe trait implementations for resources."],["PanicHandler","A setup handler that simply does nothing and thus will cause a panic on fetching. The panic will provide the type name if the `nightly` feature of shred is enabled."],["Par","Runs two tasks in parallel. These two tasks are called `head` and `tail` in the following documentation."],["ParSeq","A dispatcher intended to be used with `Par` and `Seq`  structures."],["Read","Allows to fetch a resource in a system immutably."],["ResourceId","The id of a [`Resource`], which is a tuple struct with a type id and an additional resource id (represented with a `usize`)."],["Resources","A resource container, which provides methods to access to the contained resources."],["Seq","Runs two tasks sequentially. These two tasks are called `head` and `tail` in the following documentation."],["StaticAccessor","The static accessor that is used for `SystemData`."],["Write","Allows to fetch a resource in a system mutably."]],"trait":[["Accessor","A trait for accessing read/write multiple resources from a system. This can be used to create dynamic systems that don't specify what they fetch at compile-time."],["CastFrom","Helper trait for the `MetaTable`. This trait is required to be implemented for a trait to be compatible with the meta table."],["DynamicSystemData","A struct implementing system data indicates that it bundles some resources which are required for the execution."],["Resource","A resource defines a set of data which can only be accessed according to Rust's typical borrowing model (one writer xor multiple readers)."],["RunNow","Trait for fetching data and running systems. Automatically implemented for systems."],["RunWithPool","Similar to `RunNow` except additionally taking in a rayon::ThreadPool for parallelism."],["SetupHandler","A setup handler performing the fetching of `T`."],["System","A `System`, executed with a set of required [`Resource`]s."],["SystemData","A static system data that can specify its dependencies at statically (at compile-time). Most system data is a `SystemData`, the `DynamicSystemData` type is only needed for very special setups."]],"type":[["ReadExpect","Allows to fetch a resource in a system immutably. This will panic if the resource does not exist. Usage of `Read` or `Option<Read>` is therefore recommended."],["WriteExpect","Allows to fetch a resource in a system mutably. This will panic if the resource does not exist. Usage of `Write` or `Option<Write>` is therefore recommended."]]});