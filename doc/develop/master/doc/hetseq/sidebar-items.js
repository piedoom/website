initSidebarItems({"enum":[["Z","Type level zero value"]],"macro":[["HQueue","Convenient way to define heterogenous `Queue`"],["hlist","Convenient way to define heterogenous `List`"],["hqueue","Convenient way to define heterogenous `Queue`"],["lambda","This macro can be used to define lambdas with syntax similar to rust's lambdas Arguments are bounded by traits Mainly to use with `Functor` and `Foldable`"]],"mod":[["prelude",""]],"struct":[["List","Heterogenous list Supports pushing, splitting to head and tail Mapping and folding"],["P","Type level -1"],["Queue","Heterogenous queue Supports pushing, splitting to init and last Mapping and folding"],["S","Type level +1"]],"trait":[["ByRef",""],["Foldable","Foldable heterogenous list"],["Functor","Functor over heterogenous list"],["HetFn","Substitution for Fn trait family in stable and beta channels In nightly consider to use \"nightly\" feature and Fn trait family"],["HetFnMut","Substitution for FnMut trait family in stable and beta channels In nightly consider to use \"nightly\" feature and FnMut trait family"],["HetFnOnce","Substitution for FnMut trait family in stable and beta channels In nightly consider to use \"nightly\" feature and FnMut trait family"],["IntoList",""],["IntoQueue",""],["Length",""],["Num","Type level number"],["Try",""],["Zip",""]]});